import random

from datetime import datetime

from aiogram import F, Router, Bot
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.utils.scheduler import schedule_periodic_message
from app.utils.state import save_state

from app.info import fixed_date, compliments, questions, trivias

import app.keyboards as kb


router = Router()

game_state = {}

class QuizState(StatesGroup):
    waiting_for_answer = State()
    next_question = State()

@router.message(CommandStart())
async def handle_message(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —Ç—ã –ú–∞—Ä–∏—è?", reply_markup=kb.main)

@router.message(Command("trivia"))
async def ask_trivia(message: Message):
    trivia = random.choice(trivias)
    await message.answer(f"{trivia}")

@router.message(Command("time"))
async def time(message: Message):
    current_date = datetime.now()
    delta = (current_date - fixed_date).days
    await message.answer(f"–° {fixed_date.strftime('%d.%m.%Y')} –ø—Ä–æ—à–ª–æ {delta} –¥–Ω–µ–π. –ê —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –í–ª–∞–¥–∏–∫ —Ç–µ–±—è –ª—é–±–∏—Ç {delta} –¥–µ–Ω—å!")

@router.message(Command("love"))
async def love(message: Message):
    await message.answer("–ú–∞—Ä–∏—è, —Ç—ã —Å–∞–º–∞—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è! ‚ù§Ô∏è")

@router.message(Command("id"))
async def get_user_id(message: Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(f"–¢–≤–æ–π ID: {user_id}")

@router.message(Command("compliment"))
async def compliment(message: Message):
    compliment = random.choice(compliments)
    await message.answer(compliment)

@router.message(Command("guess"))
async def start_guess_game(message: Message):
    secret_number = random.randint(1, 100)
    game_state[message.from_user.id] = secret_number
    await message.answer(
        "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —á–∏—Å–ª–æ."
    )

@router.message(Command("quiz"))
async def start_quiz(message: Message, state: FSMContext):
    await state.set_data({"index": 0, "correct_answers": 0})
    question = questions[0]["question"]
    await message.answer(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –í–æ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n{question}")
    await state.set_state(QuizState.waiting_for_answer)


@router.message(F.text == "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def handle_message(message: Message):
    await message.answer("–Ø –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∂–µ. –•–æ–∑—è–∏–Ω —Ç–µ–±—è –ª—é–±–∏—Ç!")
    await message.answer("/time - —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã —Å —Ö–æ–∑—è–∏–Ω–æ–º –≤–º–µ—Å—Ç–µ!")
    await message.answer("/love - –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–∞–º—É —Å–µ–±—è!")
    await message.answer("/compliment - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç!")
    await message.answer("/guess - —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'!")
    await message.answer("/quiz - —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É '–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ –í–ª–∞–¥–∏–∫–µ!'")
    await message.answer("/trivia - –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å!(–ù–µ —Å–º–æ—Ç—Ä–∏, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏!)")

@router.message(F.text == "–ß—Ç–æ —è –∑–Ω–∞—é –æ —Ç–µ–±–µ!")
async def handle_message(message: Message):
    await message.answer("–¢—ã –ª—é–±–∏—à—å –í–ª–∞–¥–∏–∫–∞! –ê –æ–Ω –ª—é–±–∏—Ç —Ç–µ–±—è!")

@router.message(F.text == "–ó–∞–≥–ª—É—à–∫–∞")
async def handle_message(message: Message):
    await message.answer("–ø—É–∫ –ø—É–∫ –ø—É–∫...")

@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫ üíå")
async def handle_message(message: Message):
    await message.answer("–¢—ã –ø–æ–ø—Ä–æ—Å–∏–ª–∞ –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏. –¢–∞–∫ —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞, —á—Ç–æ —è —Ç–µ–±—è –ª—é–±–ª–Æ! ‚ù§Ô∏è")


@router.message(lambda message: "–≥—Ä—É—Å—Ç–Ω" in message.text.lower())
async def cheer_up(message: Message):
    await message.answer("–ù–µ –≥—Ä—É—Å—Ç–∏, —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å! –í–µ–¥—å —è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω‚ù§Ô∏è")

@router.message(lambda message: "–¥–∞" in message.text.lower())
async def cheer_up(message: Message):
    await message.answer("–ü–∏–∑–¥–∞)")

@router.message(lambda message: message.from_user.id in game_state)
async def guess_number(message: Message):
    try:
        secret_number = game_state[message.from_user.id]
        user_guess = int(message.text)

        if user_guess < secret_number:
            await message.answer("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –ø–æ–±–æ–ª—å—à–µ! –ú–∞—Ä–∏—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        elif user_guess > secret_number:
            await message.answer("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ! –ú–∞—Ä–∏—á–∫–∞, –µ—â—ë —Ä–∞–∑–æ–∫!")
        else:
            await message.answer(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ú–∞—Ä–∏—è! –¢—ã —É–≥–∞–¥–∞–ª–∞ —á–∏—Å–ª–æ: {secret_number} üéâ"
            )
            del game_state[message.from_user.id]
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


@router.message(QuizState.waiting_for_answer)
async def check_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    index = data["index"]
    correct_answers = data["correct_answers"]

    user_answer = message.text.lower().strip()
    correct_answer = questions[index]["answer"].lower()

    if user_answer == correct_answer:
        correct_answers += 1
        await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
    else:
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {questions[index]['answer']}")

    index += 1

    if index < len(questions):
        await state.update_data(index=index, correct_answers=correct_answers)

        next_question = questions[index]["question"]
        await message.answer(f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n{next_question}")
    else:
        await message.answer(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_answers} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await state.clear()
